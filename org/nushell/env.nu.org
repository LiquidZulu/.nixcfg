#+title: .org for env.nu
#+PROPERTY: header-args :tangle ~/.config/nushell/env.nu

* environment variables
** ENV_CONVERSIONS
#+begin_src nushell
# Specifies how environment variables are:
# - converted from a string to a value on Nushell startup (from_string)
# - converted from a value back to a string when running external commands (to_string)
# Note: The conversions happen *after* config.nu is loaded
let-env ENV_CONVERSIONS = {
  "PATH": {
    from_string: { |s| $s | split row (char esep) | path expand --no-symlink }
    to_string: { |v| $v | path expand --no-symlink | str join (char esep) }
  }
  "Path": {
    from_string: { |s| $s | split row (char esep) | path expand --no-symlink }
    to_string: { |v| $v | path expand --no-symlink | str join (char esep) }
  }
}
#+end_src

** NU_LIB_DIRS
#+begin_src nushell
# Directories to search for scripts when calling source or use
#
# By default, <nushell-config-dir>/scripts is added
let-env NU_LIB_DIRS = [
    ($nu.default-config-dir | path join 'scripts')
]
#+end_src

** NU_PLUGIN_DIRS
#+begin_src nushell
# Directories to search for plugin binaries when calling register
#
# By default, <nushell-config-dir>/plugins is added
let-env NU_PLUGIN_DIRS = [
    ($nu.default-config-dir | path join 'plugins')
]
#+end_src

** important dirs
#+begin_src nushell
let sysconf = ($env.HOME + '/.nixcfg')
let-env STARSHIP_CONFIG = ($env.HOME + '/.nixcfg/profiles/core/starship.toml')
#+end_src

** PATH
#+begin_src nushell
# To add entries to PATH (on Windows you might use Path), you can use the following pattern:
# let-env PATH = ($env.PATH | split row (char esep) | prepend '/some/path')
let-env PATH = ( $env.PATH
  | split row (char esep)
  | prepend ($env.HOME + '/.bin')
  | prepend ($env.HOME + '/.local/bin')
  | prepend ($env.HOME + '/.emacs.d/bin')
  | prepend ($env.HOME + '/.npm-packages/bin')
  | prepend ($env.HOME + '/.npm-packages/lib')
  | prepend ($env.HOME + '/Documents/capsaicin')
  | prepend ($env.HOME + '/.cargo/bin')
  | prepend ($env.HOME + '/Documents/github/pompom/target/release')
  | prepend ($env.HOME + '/Documents/github/timezone')
  | prepend ($sysconf + '/scripts'))
#+end_src
* aliases
** ls
The regular =ll= alias for list mode is unnecessary with nushell, because nushell already nicely formats the regular ls output.
#+begin_src nushell
alias la = ls -a
alias l. = ls .*

# nushell is annoying and wont allow me to alias to a pipeline
#alias ld = ls -a | where type == dir
#alias ld. = (ls .* | where type == dir)
#+end_src

** yt-dlp
#+begin_src nushell
alias yt = yt-dlp
alias yta-aac = yt-dlp --extract-audio --audio-format aac
alias yta-best = yt-dlp --extract-audio --audio-format best
alias yta-flac = yt-dlp --extract-audio --audio-format flac
alias yta-m4a = yt-dlp --extract-audio --audio-format m4a
alias yta-mp3 = yt-dlp --extract-audio --audio-format mp3
alias yta-opus = yt-dlp --extract-audio --audio-format opus
alias yta-vorbis = yt-dlp --extract-audio --audio-format vorbis
alias yta-wav = yt-dlp --extract-audio --audio-format wav
alias ytv-best = yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' --merge-output-format mp4
#+end_src

** fzf
#+begin_src nushell
alias ff = fzf
#+end_src

** nix
#+begin_src nushell
alias sysupdate = nix flake update $sysconf
alias rebuild = sudo nixos-rebuild switch --flake $sysconf
alias ur = sysupdate and rebuild
alias devshell = nix --experimental-features 'nix-command flakes' develop
#+end_src

** emacs
#+begin_src nushell
alias em = emacs -nw
alias emacs = emacsclient -c -a 'emacs'
#+end_src

** shutdown command
#+begin_src nushell
alias sd = shutdown +0
#+end_src

** disk usage
#+begin_src nushell
alias du = gdu
#+end_src

** yarn
#+begin_src nushell
alias yd = yarn dev
#+end_src

** capsaicin
#+begin_src nushell
alias cap = capsaicin
#+end_src

** directory shortcuts
#+begin_src nushell
alias cdl = echo "cdbr cdlectures cdvs"

alias cdbr = cd ($env.HOME + '/Videos/yt/b-roll')
alias cdlectures = cd ($env.HOME + '/Videos/yt/lectures')
alias cdvs = cd ($env.HOME + '/Videos/yt/vid-store')
#+end_src

** add safety to dangerous commands
#+begin_src nushell
alias cp = cp -i
alias mv = mv -i
alias rm = rm -i
#+end_src

** fun e
#+begin_src nushell
alias rr = curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh
#+end_src
* prompt
#+begin_src nushell

$env.STARSHIP_SHELL = "nu"

def create_left_prompt [] {
    starship prompt --cmd-duration $env.CMD_DURATION_MS $'--status=($env.LAST_EXIT_CODE)'
}

def create_right_prompt [] {
    starship prompt --right
}

# Use nushell functions to define your right and left prompt
$env.PROMPT_COMMAND = { || create_left_prompt }
$env.PROMPT_COMMAND_RIGHT = { || create_right_prompt }

# The prompt indicators are environmental variables that represent
# the state of the prompt
$env.PROMPT_INDICATOR = ""
$env.PROMPT_INDICATOR_VI_INSERT = ": "
$env.PROMPT_INDICATOR_VI_NORMAL = "〉"
$env.PROMPT_MULTILINE_INDICATOR = "::: "


# def create_left_prompt [] {
#     mut home = ""
#     try {
#         if $nu.os-info.name == "windows" {
#             $home = $env.USERPROFILE
#         } else {
#             $home = $env.HOME
#         }
#     }

#     let dir = ([
#         ($env.PWD | str substring 0..($home | str length) | str replace --string $home "~"),
#         ($env.PWD | str substring ($home | str length)..)
#     ] | str join)

#     let path_color = (if (is-admin) { ansi red_bold } else { ansi green_bold })
#     let separator_color = (if (is-admin) { ansi light_red_bold } else { ansi light_green_bold })
#     let path_segment = $"($path_color)($dir)"

#     $path_segment | str replace --all --string (char path_sep) $"($separator_color)/($path_color)"
# }

# def create_right_prompt [] {
#     let time_segment_color = (ansi magenta)

#     let time_segment = ([
#         (ansi reset)
#         $time_segment_color
#         (date now | date format '%m/%d/%Y %r')
#     ] | str join | str replace --all "([/:])" $"(ansi light_magenta_bold)${1}($time_segment_color)" |
#         str replace --all "([AP]M)" $"(ansi light_magenta_underline)${1}")

#     let last_exit_code = if ($env.LAST_EXIT_CODE != 0) {([
#         (ansi rb)
#         ($env.LAST_EXIT_CODE)
#     ] | str join)
#     } else { "" }

#     ([$last_exit_code, (char space), $time_segment] | str join)
# }

# # Use nushell functions to define your right and left prompt
# let-env PROMPT_COMMAND = {|| create_left_prompt }
# let-env PROMPT_COMMAND_RIGHT = {|| create_right_prompt }

# # The prompt indicators are environmental variables that represent
# # the state of the prompt
# let-env PROMPT_INDICATOR = {|| " » " }
# let-env PROMPT_INDICATOR_VI_INSERT = {|| ": " }
# let-env PROMPT_INDICATOR_VI_NORMAL = {|| "> " }
# let-env PROMPT_MULTILINE_INDICATOR = {|| "::: " }
#+end_src
* endmatter
#+begin_src nushell
zoxide init nushell | save -f ~/.zoxide.nu
#+end_src
